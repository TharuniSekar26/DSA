ake input in the form of level order traversal
Input Format

First line array size
Array elements
Constraints

No

Output Format

Level order traversal of tree

Sample Input 0

5
10 20 30 40 50
Sample Output 0

10 20 30 40 50
Sample Input 1

3
1 2 3
Sample Output 1

1 2 3
==================================================

import java.io.*;
import java.util.*;

public class Solution {
    static class node{
        int data;
        node left;
        node right;
        node(int data)
        {
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
    static node root=null;
    public static void create(int [] arr)
    {
       Queue<node> q=new LinkedList<>();
        root=new node(arr[0]);
        q.add(root);
        int i=0;
        while(!q.isEmpty()&& i<arr.length)
        {
            node cur=q.poll();
            cur.left=new node(arr[i]);
            q.add(cur.left);
            
            i++;
            if(i>=arr.length)
                break;
            cur.right=new node(arr[i]);
            q.add(cur.right);
            i++;
            
        }
        
    }
    public static void print()
    {   if(root==null)
        return;
        
        Queue<node> q1=new LinkedList<>();
        q1.add(root);
      //  System.out.print(root.data);
        while(!q1.isEmpty())
        {
            node cur=q1.poll();
            if(cur.left!=null){
            System.out.print(cur.left.data+" ");
                
            q1.add(cur.left);}
            
            if(cur.right!=null)
            {            
          System.out.print(cur.right.data+" ");
            q1.add(cur.right);}
    
            
        }
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }
        create(arr);
        print();
    }
}
