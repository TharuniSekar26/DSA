Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

Input Format

Line consists of 'n' space seperated integers representing the values present in the Array
Constraints

nums1.length == m
nums2.length == n
Output Format

Median of two sorted arrays
Sample Input 0

2
1 2
1
3
Sample Output 0

2.0
Sample Input 1

2
1 2
2
3 4
Sample Output 1

2.5


==================================================


import java.util.*;

class Solution {

    static double median(int arr1[],int arr2[],int m,int n) {

        if(m>n)
            return median(arr2,arr1,n,m);

        int low=0,high=m,medianPos=((m+n)+1)/2;

        while(low<=high) {

            int cut1 = (low+high)/2;
            int cut2 = medianPos - cut1;

            int l1 = (cut1 == 0)? Integer.MIN_VALUE:arr1[cut1-1];
            int l2 = (cut2 == 0)? Integer.MIN_VALUE:arr2[cut2-1];
            int r1 = (cut1 == m)? Integer.MAX_VALUE:arr1[cut1];
            int r2 = (cut2 == n)? Integer.MAX_VALUE:arr2[cut2];

            if(l1<=r2 && l2<=r1) {
                if((m+n)%2 != 0)
                    return Math.max(l1,l2);
                else 
                    return (Math.max(l1,l2)+Math.min(r1,r2))/2.0;
            }

            else if(l1>r2) high = cut1-1;
            else low = cut1+1;
        }

        return 0.0;

    }

    public static void main(String args[]) {

        Scanner sc = new Scanner(System.in);

        int m = sc.nextInt();
        int arr1[]=new int[m];
        for(int i=0;i<m;i++)
            arr1[i]=sc.nextInt();

        int n = sc.nextInt();
        int arr2[]=new int[n];
        for(int i=0;i<n;i++)
            arr2[i]=sc.nextInt();

        System.out.println(median(arr1,arr2,m,n));

    }   
}

