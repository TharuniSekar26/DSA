You have been given a Binary Tree of integers.
Your task is to print the Right view of it.
The right view of a Binary Tree is a set of nodes visible when the tree is viewed from the Right side and the nodes are printed from top to bottom order.
Input Format

The only line of input contains the elements of the tree in the level order form separated by a single space.
If any node does not have left or right child, take -1 in its place. Refer to the example below.
Constraints

Time:- 1 Sec

Output Format

Output for every test case will be in a separate line.

Sample Input 0

2 35 10 2 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 0

2 10 2
Sample Input 1

1 2 -1 3 -1 4 -1 5 -1 -1 -1
Sample Output 1

1 2 3 4 5
==========================================================================

import java.io.*;
import java.util.*;

public class Solution {
     static class node{
         String data;
         node left;
         node right;
         node(String  data)
         {
             this.data=data;
             this.left=null;
             this.right=null;
         }
        
    }
    static node buildtree(node root, String [] arr)
    {
        if(arr[0].equals("0") || arr.length==0)
            return null;
        Queue<node> q=new LinkedList<>();
        root=new node(arr[0]);
        q.add(root);
        int i=1;
        while(!q.isEmpty() && i<arr.length)
        {
            node cur=q.poll();
            if(!arr[i].equals("-1"))
            {
                cur.left=new node(arr[i]);
                q.add(cur.left);       
            }
            i++;
            if(i>=arr.length)
                break;
            if(!arr[i].equals("-1"))
            {
                cur.right=new node(arr[i]);
                q.add(cur.right);
            }
            i++;
        }
        return root;
    }
    
   static Queue<String> q1=new LinkedList<>();
static void rightview(node root, int l)
    
{  
    if(root==null)
        return;
    if(q1.size()==l)
    {
        q1.add(root.data);
        
    }
    rightview(root.right, l+1);
    rightview(root.left, l+1);
    
}
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String s[]=sc.nextLine().split(" ");
        node root=null;
        root=buildtree(root, s);
        rightview(root,0);  
        while(!q1.isEmpty())
        System.out.print(q1.poll()+" ");
        
    }
}
