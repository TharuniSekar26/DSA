For a given a string expression containing only round brackets or parentheses, check if they are balanced or not. Brackets are said to be balanced if the bracket which opens last, closes first.

Input Format

Expression: (()())
Since all the opening brackets have their corresponding closing brackets, we say it is balanced and hence the output will be, 'true'.
You need to return a boolean value indicating whether the expression is balanced or not.
Note:
The input expression will not contain spaces in between.
Constraints

1 <= N <= 10^7
Where N is the length of the expression.
Time Limit: 1sec
Output Format

The only line of output prints 'true' or 'false'.
Sample Input 0

(()()())
Sample Output 0

true
Sample Input 1

()()(()
Sample Output 1

false

===============================================================================


import java.io.*;
import java.util.*;

public class Solution {
    static Stack<String> s=new Stack<>();
    public static Boolean check(String [] arr)
    {
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i].equals("("))
                s.push(arr[i]);
            else
            {
                if(s.isEmpty())
                    return false;
                s.pop();
                    
            }
        }
        return true;
    }

    public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
        String str=sc.nextLine();
        String[] arr=str.split("");
       if(!check(arr))
           System.out.print("false");
        else{
            if(s.isEmpty())
                 System.out.print("true");
            else
                 System.out.print("false");
        }    
    }
}
