Given a singly linked list of integers, reverse the nodes of the linked list 'k' at a time and return its modified list.
'k' is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of 'k,' then left-out nodes, in the end, should be reversed as well.
Example :
Given this linked list: 1 -> 2 -> 3 -> 4 -> 5
For k = 2, you should return: 2 -> 1 -> 4 -> 3 -> 5
For k = 3, you should return: 3 -> 2 -> 1 -> 5 -> 4
Input Format

The first line of each test case or query contains the elements of the singly linked list separated by a single space.
The second line of input contains a single integer depicting the value of 'k'.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element
Constraints

0 <= M <= 10^5
Where M is the size of the singly linked list.
0 <= k <= M
Time Limit: 1sec
Output Format

For each test case/query, print the elements of the updated singly linked list.
Sample Input 0

1 2 3 4 5 6 7 8 9 10 -1
4
Sample Output 0

4 3 2 1 8 7 6 5 10 9
Sample Input 1

1 2 3 4 5 -1
0
Sample Output 1

1 2 3 4 5

==========================================================================================================

import java.io.*;
import java.util.*;

public class Solution {

    static node head = null;
    static node tail = null;

    static class node{
        int data;
        node next,prev;

        node(int a){
            this.data = a;
            this.next = null;
            this.prev = null;
        }
    }

    static void insert(int a){
        node newnode = new node(a);
        if(head == null){
            head = newnode;
            tail = newnode;
        }
        else{
            tail.next= newnode;
            newnode.prev = tail;
            tail = newnode;
        }
    }

   static node reverse(node head, int k)
    {
        if(head == null)
          return null;
        node current = head;
        node next = null;
        node prev = null;

        int count = 0;

        while (count < k && current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            count++;
        }

        if (next != null)
            head.next = reverse(next, k);

        return prev;
    }

    static void print(node h){
        while(h!=null){
            System.out.print(h.data+" ");
            h=h.next;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while(true){
            int a = sc.nextInt();
            if(a==-1)   
                break;
            insert(a);
        }

        int k = sc.nextInt();
        if(k!=0)
            head = reverse(head,k);
        print(head);
    }
}

