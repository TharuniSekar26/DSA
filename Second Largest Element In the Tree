Given a generic tree, find and return the node with second largest value in given tree.
Note: Return NULL if no node with required value is present.
Input Format

The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space.

Constraints

Time:- 1 Sec

Output Format

The first and only line of output contains data of the node with second largest data.
Sample Input 0

10 3 20 30 40 2 40 50 0 0 0 0
Sample Output 0

40
Sample Input 1

10 3 20 30 40 2 400 50 0 0 0 0 
Sample Output 1

50

====================================================================

import java.io.*;
import java.util.*;

class node{
    int data;
    List<node > children;
    node(int data)
    {
        this.data=data;
        this.children=new ArrayList<node>();
    }
}
public class Solution {
public static node buildtree(node root, String[] arr)
{
    root=new node(Integer.parseInt(arr[0]));
    Queue<node> q=new LinkedList<node>();
    q.add(root);
    int i=1;
    while(!q.isEmpty())
    {
        int child=Integer.parseInt(arr[i++]);
      node cur=q.poll();
        for(int j=0;j<child;j++)
        {
            node temp=new node(Integer.parseInt(arr[i++]));
            root.children.add(temp);
            q.add(temp);
        }
    }
    return root;
}
    static int max=0,pre=0;
    public static void find(node root)
    {
        if(root==null)
            return;
        Queue<node> q=new LinkedList<node>();
        q.add(root);
        while(!q.isEmpty())
        {
            node p=q.poll();
            if(max<p.data)
            {
                pre=max;
                max=p.data;
            }
            else if (pre<p.data){
                pre=p.data;
            }
            for(int i=0;i<p.children.size();i++)
            {
                q.add(p.children.get(i));
            }
        }
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String [] arr=sc.nextLine().split(" ");
        node root=null;
           root= buildtree(root, arr);
        find(root);
        System.out.print(pre);
    }
}
