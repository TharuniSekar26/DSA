import java.util.*;
public class Main
{
    static void shortestPath(int[][] graph,int source,int n){
        
        int[] dist = new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[source]=0;
        // shorrest path 
        for(int k=0;k<n-1;k++){
            for(int u=0;u<n;u++){
                for(int v=0;v<n;v++){
                    if(graph[u][v]!=0 && dist[u]!=Integer.MAX_VALUE && dist[u]+graph[u][v]<dist[v]){
                        dist[v]=dist[u]+graph[u][v];
                    }
                }
            }
        }
        // to find negative cycle
        for(int u=0;u<n;u++){
                for(int v=0;v<n;v++){
                    if(graph[u][v]!=0 && dist[u]+graph[u][v]<dist[v]){
                        System.out.println("negative cycle no shortest path");
                        return;
                    }
                }
            }
        
        
        for(int i=1;i<n;i++){
            System.out.println(source + " -> "+i+ " "+ dist[i]);
        }
        
    }
   
	public static void main(String[] args) {
	    	Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int e = sc.nextInt();
	
		int graph[][] = new int[n][n];
		for(int i=0;i<e;i++){
		    int u = sc.nextInt();
		    int v = sc.nextInt();
		    int w = sc.nextInt();
		    
		    graph[u][v]=w;
		  //  graph[v][u]=w;
		}
		
		
		shortestPath(graph,0,n);
	}
}
