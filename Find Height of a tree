Given a generic tree, find and return the height of given tree.

Input Format

The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space.

Constraints

Time Limit: 1 sec

Output Format

The first and only line of output prints the height of the given generic tree.

Sample Input 0

10 3 20 30 40 2 40 50 0 0 0 0
Sample Output 0

3
Sample Input 1

10 3 20 30 40 2 40 50 0 0 0 0
Sample Output 1

3
======================================================================


import java.util.*;
public class Main{
    static class node{
        int data;
        List<node> children;
        node(int data)
        {
            this.data=data;
            this.children=new ArrayList<>();
        }
    }
   static int count=0;
   public static node buildtree(String[] arr)
   {
       Queue<node> q=new LinkedList<node>();
       node root=new node(Integer.parseInt(arr[0]));
       q.add(root);
       int i=1;
       while(!q.isEmpty() && i<arr.length){
       int child=Integer.parseInt(arr[i++]);
       node cur=q.poll();
       for(int j=0;j<child;j++)
       {
           
           node curchild=new node(Integer.parseInt(arr[i++]));
           cur.children.add(curchild);
           q.add(curchild);
       }
       }
       return root;
   }
   public static int find(node root )
   {
       int ht=-1;
       for(node child: root.children)
       {
            int ch=find(child); 
            ht=Math.max(ch,ht);
       }
      ht+=1;
       return ht;
   }
   
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String []arr=sc.nextLine().split(" ");
       node root=buildtree(arr);
       count= find(root);
       System.out.print(count+1);
    }
}
