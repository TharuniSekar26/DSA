Take Input Level Wise of Binary Tree and then print in the inorder format

Input Format

No

Constraints

No

Output Format

Inorder traversal of Binary tree

Sample Input 0

8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
Sample Output 0

1 3 4 6 7 8 10 13 14
Sample Input 1

1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 1

4 2 5 1 6 3 7 
================================================================

import java.io.*;
import java.util.*;

public class Solution {
    static class node{
        String data;
        node left;
        node right;
        node( String data)
        {
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
public static node buildtree(String[] arr)
{
    if(arr[0].equals("-1")|| arr.length<=1)
        return null;
    Queue<node> q=new LinkedList<node>();
    node root=new node(arr[0]);
    q.add(root);
    int i=1;
    while(!q.isEmpty() && i<arr.length)
    {
        node cur=q.poll();
        if(!arr[i].equals("-1")){
        cur.left=new node(arr[i]);
        q.add(cur.left);
        }
        i++;
        if(i>arr.length)
            break;
        if(!arr[i].equals("-1"))
        {
            cur.right=new node(arr[i]);  
            q.add(cur.right);
        }
        i++;
    }
    
    return root;
}
    public static void inorder(node root)
    {
        
        if(root==null)
            return;
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String []arr=sc.nextLine().split(" ");
        node root=buildtree(arr);
        inorder(root);
    }
}
