Given a Singly Linked List of integers, delete all the alternate nodes in the list.
Example:
List: 10 -> 20 -> 30 -> 40 -> 50 -> 60 -> null
Alternate nodes will be: 20, 40, and 60.
Hence after deleting, the list will be:
Output: 10 -> 30 -> 50 -> null
Input Format

The first and the only line of input will contain the elements of the Singly Linked List separated by a single space and terminated by -1.
Constraints

1 <= N <= 10 ^ 6.
Where N is the size of the Singly Linked List
Time Limit: 1 sec
Output Format

The only line of output will contain the updated list elements.
Sample Input 0

1 2 3 4 5 -1
Sample Output 0

1 3 5
Sample Input 1

10 20 30 40 50 60 70 -1
Sample Output 1

10 30 50 70 
===================================================

import java.io.*;
import java.util.*;

public class Solution {
static class node{
    int data;
    node next;
        node (int val)
    {
        this .data=val;
        next=null;
    }
    }
    static node head=null,tail=null;
public static void push(int val){
    node newnode=new node(val);
    if(head==null){
        head=newnode;
        tail=newnode;}
    else{
        tail.next=newnode;
        tail=newnode;
    }
    
}
    public static void delete()
    {
        if(head==null || head.next==null)
            return;
        if(head.next.next==null)
        {
            head.next=null;
            return;
        }
        node first=head,second=head.next;
        while(first!=null && first.next!=null && second!=null && second.next!=null)
        {
            first.next=second.next;
            first=first.next;
            second.next=first.next;
            second=second.next;
        }
        first.next=null;
    }
    public static void print()
    {
        node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int val=0;
        while(true)
        {
            val=sc.nextInt();
            if(val==-1)
                break;
            push(val);
        }
        delete();
        print();
    }
}
