Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.
Input Format

Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Constraints

1 <= n <= 10^3
Output Format

Array elements in increasing order (separated by space)
Sample Input 0

6 
2 6 8 5 4 3
Sample Output 0

2 3 4 5 6 8
Sample Input 1

5
1 5 2 7 3
Sample Output 1

1 2 3 5 7
==================================================

import java.io.*;
import java.util.*;

public class Solution {

    static void swap(int[] arr, int i, int j){

        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;

    }

    static int partition(int[] arr, int low, int high)
    {

        int pivot = arr[high];

        int i = (low - 1);

        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr, i, j);
            }
        }

        swap(arr, i + 1, high);
        return (i + 1);
    }

    static void quickSort(int[] arr, int low, int high)
    {
        if (low < high) {

            int pi = partition(arr, low, high);

            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    static void printArray(int[] arr, int size)
    {
        for (int i = 0; i < size; i++)
            System.out.print(arr[i] + " ");

        System.out.println();
    }


    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[]=new int[n];
        for(int i=0;i<n;i++)
            arr[i]=sc.nextInt();

        quickSort(arr, 0, n - 1);
        printArray(arr, n);
    }
}
