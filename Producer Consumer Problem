// we are sharing Resource Object to two threads... producer and consumer...this Resource possess an array 
// now this array will be accessed by both the threads.. so we are using synchronized methods...
// but in my case.. i have only 10 memory space in my memory.. so i cant able to produce 100 cakes at a time..
// i want to make two threads to use the same Resource concurrently.. thats why i am using wait(), notify()
// once i complete producing.. i ask consumer thread to consume the product by using notify() .. 

class Resource{
    int[] arr = new int[10];
    int len = arr.length;
    int index = 0;
    
    synchronized void produce(int val){
        while(index>=len){
            try{
                wait();
            }catch(InterruptedException e){
		        System.out.print("caught");
		    }
        }
        arr[index++] = val;
        System.out.println("Producer: "+val);
        notify();
    }
    synchronized void consume(){
        while(index<=0){
            try{
                wait();
            }catch(InterruptedException e){
		        System.out.print("caught");
		    }
        }
        int val = arr[--index];
        System.out.println("Consumer: "+val);
        notify();
    }
}
class Producer extends Thread{
    Resource r;
    Producer(Resource r){
         this.r = r;
     }
    public void run(){
        for(int i=1;i<=100;i++){
            r.produce(i);
        }
    }
}

class Consumer extends Thread{
     Resource r;
     Consumer(Resource r){
         this.r = r;
     }
    public void run(){
        for(int i=1;i<=100;i++){
            r.consume();
        }
    }
}
public class Main
{
	public static void main(String[] args) {
	    Resource r = new Resource();
		Producer p = new Producer(r);
		Consumer c = new Consumer(r);
		
		p.start();
		c.start();
		
	}
}
