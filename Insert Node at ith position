Given a singly linked list of integers and position 'i', delete the node present at the 'i-th' position in the linked list recursively.
Note : Assume that the Indexing for the linked list always starts from 0.
Input Format

The first line of each test case or query contains the elements of the singly linked list separated by a single space.
The second line of input contains a single integer depicting the value of 'i'.
Constraints

Time:- 1sec
Output Format

Output will be printed in a seperate line.
Sample Input 0

3 4 5 2 6 1 9 -1
3 100
Sample Output 0

3 4 5 100 2 6 1 9
Sample Input 1

3 4 5 2 6 1 9 -1
0 20
Sample Output 1

20 3 4 5 2 6 1 9

==============================================================


import java.io.*;
import java.util.*;

public class demo {

    static node head = null;
    static node tail = null;
    static int ind = -1;
    static class node{
        int data;
        node next;

        node(int a){
            this.data= a;
            this.next=null;
        }
    }

    static void insert(int a){
        node newnode = new node(a);
        if(head == null){
            head = newnode;
            tail = newnode;
        }
        else{
            tail.next= newnode;
            tail = newnode;
        }
    }

    static void insertInd(node h, int i,int n){
        node newnode = new node(n);
        for(int j=0;j<i-1;j++){
            h=h.next;
        }
        if(i==0){
            newnode.next=head;
            head=newnode;
        }
        else{
            newnode.next=h.next;
            h.next=newnode;
        }

    }

    static void print(node h){
        while(h!=null ){
            System.out.print(h.data+" ");
            h=h.next;
        }
    }


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while(true){
            int a = sc.nextInt();
            if(a==-1)   
                break;
            insert(a);
        }

        int ind = sc.nextInt();
        int elt = sc.nextInt();

        insertInd(head,ind,elt);
        print(head);
    }
}
