Given a generic tree, find and return the sum of all nodes present in the given tree.

Input Format

The first line of input contains data of the nodes of the tree in level order form. The order is: data for root node, number of children to root node, data of each of child nodes and so on and so forth for each node. The data of the nodes of the tree is separated by space

Constraints

Time:- 1 sec

Output Format

The first and only line of output prints the sum of all nodes of the given generic tree.

Sample Input 0

10 3 20 30 40 2 40 50 0 0 0 0
Sample Output 0

190
Sample Input 1

6 3 4 10 9 2 3 2 1 1 3 12 7 5 0 0 2 11 8 0 0 0 0 0
Sample Output 1

78

==============================================================================

import java.util.*;

class TreeNode {
    int val;
    List<TreeNode> children;

    TreeNode(int val) {
        this.val = val;
        this.children = new ArrayList<>();
    }
}

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        TreeNode root = buildTree(input);
        int sum = findSum(root);
        System.out.println(sum);
    }

    private static TreeNode buildTree(String[] input) {
        Queue<TreeNode> queue = new LinkedList<>();
        TreeNode root = new TreeNode(Integer.parseInt(input[0]));
        queue.offer(root);
        int i = 1;
        while (!queue.isEmpty() && i < input.length) {
            TreeNode current = queue.poll();
            int childrenCount = Integer.parseInt(input[i++]);
            for (int j = 0; j < childrenCount; j++) {
                TreeNode child = new TreeNode(Integer.parseInt(input[i++]));
                current.children.add(child);
                queue.offer(child);
            }
        }
        return root;
    }

    private static int findSum(TreeNode root) {
        if (root == null) return 0;
        int sum = root.val;
        for (TreeNode child : root.children) {
            sum += findSum(child);
        }
        return sum;
    }
}
