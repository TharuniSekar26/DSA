A queue is an abstract data type that maintains the order in which elements were added to it, allowing the oldest elements to be removed from the front and new elements to be added to the rear. This is called a First-In-First-Out (FIFO) data structure because the first element added to the queue (i.e., the one that has been waiting the longest) is always the first one to be removed.

A basic queue has the following operations:

Enqueue: add a new element to the end of the queue.
Dequeue: remove the element from the front of the queue and return it.

==========================================================================================

import java.util.*;

class MyQueue {
    Stack < Integer > input = new Stack <> ();
    Stack < Integer > output = new Stack <> ();
    public MyQueue() {

    }

    public void push(int x) {
        input.push(x);
    }

    public int pop() {
        if (output.empty())
            while (input.empty() == false) {
                output.push(input.pop());
            }

        return output.pop();
    }

    public int peek() {
        if (output.empty())
            while (input.empty() == false) {
                output.push(input.pop());
            }
        return output.peek();
    }

    int size() {
        return (output.size() + input.size());
    }


}

class Solution {

    public static void main(String args[]) {
        MyQueue q = new MyQueue();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for(int i=0;i<n;i++){
            int choice = sc.nextInt();
            if(choice == 1){
                q.push(sc.nextInt());
            }
            if(choice == 2){
                q.pop();
            }
            if(choice == 3){
                System.out.println(q.peek());
            }
        }

    }
}

